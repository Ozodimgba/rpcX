// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod component {
    pub mod solana_rpcx_bindings {
        /// ============================================================================
        /// TYPES - Shared across all interfaces
        /// ============================================================================
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Represents a Solana account with all its metadata
            #[derive(Clone)]
            pub struct SolanaAccount {
                /// Base58-encoded public key
                pub pubkey: _rt::String,
                /// Raw account data bytes
                pub data: _rt::Vec<u8>,
                /// Program that owns this account
                pub owner: _rt::String,
                /// Account balance in lamports
                pub lamports: u64,
                /// Whether this account is executable
                pub executable: bool,
                /// Epoch at which rent is due
                pub rent_epoch: u64,
            }
            impl ::core::fmt::Debug for SolanaAccount {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SolanaAccount")
                        .field("pubkey", &self.pubkey)
                        .field("data", &self.data)
                        .field("owner", &self.owner)
                        .field("lamports", &self.lamports)
                        .field("executable", &self.executable)
                        .field("rent-epoch", &self.rent_epoch)
                        .finish()
                }
            }
            /// Result of successfully parsing an account
            #[derive(Clone)]
            pub struct ParsedAccount {
                /// Human-readable type name (e.g., "TokenAccount")
                pub account_type: _rt::String,
                /// Parsed data as JSON string
                pub data: _rt::String,
                /// Optional discriminator bytes that identified this type
                pub discriminator: Option<_rt::Vec<u8>>,
            }
            impl ::core::fmt::Debug for ParsedAccount {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ParsedAccount")
                        .field("account-type", &self.account_type)
                        .field("data", &self.data)
                        .field("discriminator", &self.discriminator)
                        .finish()
                }
            }
            /// Errors that can occur during parsing
            #[derive(Clone)]
            pub enum ParseError {
                /// Account type not recognized by this parser
                UnknownAccountType(_rt::String),
                /// Failed to deserialize account data
                DeserializationFailed(_rt::String),
                /// Account data is invalid or corrupted
                InvalidData(_rt::String),
                /// Account data is too short
                InsufficientData(_rt::String),
            }
            impl ::core::fmt::Debug for ParseError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ParseError::UnknownAccountType(e) => {
                            f.debug_tuple("ParseError::UnknownAccountType")
                                .field(e)
                                .finish()
                        }
                        ParseError::DeserializationFailed(e) => {
                            f.debug_tuple("ParseError::DeserializationFailed")
                                .field(e)
                                .finish()
                        }
                        ParseError::InvalidData(e) => {
                            f.debug_tuple("ParseError::InvalidData").field(e).finish()
                        }
                        ParseError::InsufficientData(e) => {
                            f.debug_tuple("ParseError::InsufficientData")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for ParseError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for ParseError {}
            /// Configuration options for parsing
            #[derive(Clone)]
            pub struct ParseOptions {
                /// Include raw bytes in output
                pub include_raw: bool,
                /// Pretty-print JSON
                pub pretty_json: bool,
                /// Custom parameters as JSON
                pub custom: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ParseOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ParseOptions")
                        .field("include-raw", &self.include_raw)
                        .field("pretty-json", &self.pretty_json)
                        .field("custom", &self.custom)
                        .finish()
                }
            }
            /// Instruction data to parse
            #[derive(Clone)]
            pub struct InstructionData {
                /// Program ID that owns this instruction
                pub program_id: _rt::String,
                /// Instruction data bytes
                pub data: _rt::Vec<u8>,
                /// Account pubkeys involved
                pub accounts: _rt::Vec<_rt::String>,
            }
            impl ::core::fmt::Debug for InstructionData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InstructionData")
                        .field("program-id", &self.program_id)
                        .field("data", &self.data)
                        .field("accounts", &self.accounts)
                        .finish()
                }
            }
            /// Transaction data
            #[derive(Clone)]
            pub struct SolanaTransaction {
                /// Transaction signature
                pub signature: _rt::String,
                /// List of instructions in the transaction
                pub instructions: _rt::Vec<InstructionData>,
                /// Accounts involved in the transaction
                pub accounts: _rt::Vec<_rt::String>,
                /// Recent blockhash
                pub recent_blockhash: _rt::String,
            }
            impl ::core::fmt::Debug for SolanaTransaction {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SolanaTransaction")
                        .field("signature", &self.signature)
                        .field("instructions", &self.instructions)
                        .field("accounts", &self.accounts)
                        .field("recent-blockhash", &self.recent_blockhash)
                        .finish()
                }
            }
            /// Parsed instruction result
            #[derive(Clone)]
            pub struct ParsedInstruction {
                /// Instruction name
                pub instruction_name: _rt::String,
                /// Parsed data as JSON
                pub data: _rt::String,
            }
            impl ::core::fmt::Debug for ParsedInstruction {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ParsedInstruction")
                        .field("instruction-name", &self.instruction_name)
                        .field("data", &self.data)
                        .finish()
                }
            }
            /// Metadata about the program
            #[derive(Clone)]
            pub struct ProgramMetadata {
                /// Program name
                pub name: Option<_rt::String>,
                /// Program ID
                pub program_id: Option<_rt::String>,
                /// Project website
                pub project_url: Option<_rt::String>,
                /// Version
                pub version: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ProgramMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ProgramMetadata")
                        .field("name", &self.name)
                        .field("program-id", &self.program_id)
                        .field("project-url", &self.project_url)
                        .field("version", &self.version)
                        .finish()
                }
            }
        }
        /// ============================================================================
        /// ACCOUNTS-DB - Import (Host provides this to guest)
        /// ============================================================================
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod accounts_db {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type SolanaAccount = super::super::super::component::solana_rpcx_bindings::types::SolanaAccount;
            #[allow(unused_unsafe, clippy::all)]
            /// Fetch a single account from the chain
            /// Your WASM can call this to get additional data while parsing
            pub fn get_account(pubkey: &str) -> Option<SolanaAccount> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 32 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 32
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = pubkey;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "component:solana-rpcx-bindings/accounts-db"
                    )]
                    unsafe extern "C" {
                        #[link_name = "get-account"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result16 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                let l7 = *ptr1
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l8 = *ptr1
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let l10 = *ptr1
                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l11 = *ptr1
                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len12 = l11;
                                let bytes12 = _rt::Vec::from_raw_parts(
                                    l10.cast(),
                                    len12,
                                    len12,
                                );
                                let l13 = *ptr1
                                    .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                let l14 = i32::from(
                                    *ptr1
                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l15 = *ptr1
                                    .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                super::super::super::component::solana_rpcx_bindings::types::SolanaAccount {
                                    pubkey: _rt::string_lift(bytes6),
                                    data: _rt::Vec::from_raw_parts(l7.cast(), len9, len9),
                                    owner: _rt::string_lift(bytes12),
                                    lamports: l13 as u64,
                                    executable: _rt::bool_lift(l14 as u8),
                                    rent_epoch: l15 as u64,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result16
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Fetch multiple accounts at once (more efficient)
            pub fn get_multiple_accounts(
                pubkeys: &[_rt::String],
            ) -> _rt::Vec<Option<SolanaAccount>> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec1 = pubkeys;
                    let len1 = vec1.len();
                    let layout1 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec1.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result1 = if layout1.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout1);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec1.into_iter().enumerate() {
                        let base = result1
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len0;
                            *base.add(0).cast::<*mut u8>() = ptr0.cast_mut();
                        }
                    }
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "component:solana-rpcx-bindings/accounts-db"
                    )]
                    unsafe extern "C" {
                        #[link_name = "get-multiple-accounts"]
                        fn wit_import3(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import3(result1, len1, ptr2) };
                    let l4 = *ptr2.add(0).cast::<*mut u8>();
                    let l5 = *ptr2
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base19 = l4;
                    let len19 = l5;
                    let mut result19 = _rt::Vec::with_capacity(len19);
                    for i in 0..len19 {
                        let base = base19
                            .add(i * (32 + 6 * ::core::mem::size_of::<*const u8>()));
                        let e19 = {
                            let l6 = i32::from(*base.add(0).cast::<u8>());
                            match l6 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l7 = *base.add(8).cast::<*mut u8>();
                                        let l8 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len9 = l8;
                                        let bytes9 = _rt::Vec::from_raw_parts(
                                            l7.cast(),
                                            len9,
                                            len9,
                                        );
                                        let l10 = *base
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l11 = *base
                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len12 = l11;
                                        let l13 = *base
                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l14 = *base
                                            .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len15 = l14;
                                        let bytes15 = _rt::Vec::from_raw_parts(
                                            l13.cast(),
                                            len15,
                                            len15,
                                        );
                                        let l16 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l17 = i32::from(
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l18 = *base
                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        super::super::super::component::solana_rpcx_bindings::types::SolanaAccount {
                                            pubkey: _rt::string_lift(bytes9),
                                            data: _rt::Vec::from_raw_parts(l10.cast(), len12, len12),
                                            owner: _rt::string_lift(bytes15),
                                            lamports: l16 as u64,
                                            executable: _rt::bool_lift(l17 as u8),
                                            rent_epoch: l18 as u64,
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            }
                        };
                        result19.push(e19);
                    }
                    _rt::cabi_dealloc(
                        base19,
                        len19 * (32 + 6 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result20 = result19;
                    if layout1.size() != 0 {
                        _rt::alloc::dealloc(result1.cast(), layout1);
                    }
                    result20
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod component {
        pub mod solana_rpcx_bindings {
            /// ============================================================================
            /// PROGRAM-PARSER - Export (Guest implements this)
            /// ============================================================================
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod program_parser {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type SolanaAccount = super::super::super::super::component::solana_rpcx_bindings::types::SolanaAccount;
                pub type ParsedAccount = super::super::super::super::component::solana_rpcx_bindings::types::ParsedAccount;
                pub type ParseError = super::super::super::super::component::solana_rpcx_bindings::types::ParseError;
                pub type ParseOptions = super::super::super::super::component::solana_rpcx_bindings::types::ParseOptions;
                pub type InstructionData = super::super::super::super::component::solana_rpcx_bindings::types::InstructionData;
                pub type ParsedInstruction = super::super::super::super::component::solana_rpcx_bindings::types::ParsedInstruction;
                pub type ProgramMetadata = super::super::super::super::component::solana_rpcx_bindings::types::ProgramMetadata;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_parse_account_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i64,
                    arg7: i32,
                    arg8: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let result3 = T::parse_account(super::super::super::super::component::solana_rpcx_bindings::types::SolanaAccount {
                        pubkey: _rt::string_lift(bytes0),
                        data: _rt::Vec::from_raw_parts(arg2.cast(), len1, len1),
                        owner: _rt::string_lift(bytes2),
                        lamports: arg6 as u64,
                        executable: _rt::bool_lift(arg7 as u8),
                        rent_epoch: arg8 as u64,
                    });
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::component::solana_rpcx_bindings::types::ParsedAccount {
                                account_type: account_type5,
                                data: data5,
                                discriminator: discriminator5,
                            } = e;
                            let vec6 = (account_type5.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr4
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr4
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                            let vec7 = (data5.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr4
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr4
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr7.cast_mut();
                            match discriminator5 {
                                Some(e) => {
                                    *ptr4
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr4
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr4
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::component::solana_rpcx_bindings::types::ParseError as V13;
                            match e {
                                V13::UnknownAccountType(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V13::DeserializationFailed(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V13::InvalidData(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V13::InsufficientData(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr12.cast_mut();
                                }
                            }
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_parse_account<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                            let l5 = i32::from(
                                *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l5 {
                                0 => {}
                                _ => {
                                    let l6 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base8 = l6;
                                    let len8 = l7;
                                    _rt::cabi_dealloc(base8, len8 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l9 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l9 {
                                0 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                1 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                2 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                _ => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_parse_accounts_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base12 = arg0;
                    let len12 = arg1;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12
                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                        let e12 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len5 = l4;
                            let l6 = *base
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l7 = *base
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len8 = l7;
                            let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                            let l9 = *base
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>();
                            let l10 = i32::from(
                                *base
                                    .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let l11 = *base
                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>();
                            super::super::super::super::component::solana_rpcx_bindings::types::SolanaAccount {
                                pubkey: _rt::string_lift(bytes2),
                                data: _rt::Vec::from_raw_parts(l3.cast(), len5, len5),
                                owner: _rt::string_lift(bytes8),
                                lamports: l9 as u64,
                                executable: _rt::bool_lift(l10 as u8),
                                rent_epoch: l11 as u64,
                            }
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(
                        base12,
                        len12 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result13 = T::parse_accounts(result12);
                    let ptr14 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result13 {
                        Ok(e) => {
                            *ptr14.add(0).cast::<u8>() = (0i32) as u8;
                            let vec24 = e;
                            let len24 = vec24.len();
                            let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec24.len() * (8 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result24 = if layout24.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout24);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec24.into_iter().enumerate() {
                                let base = result24
                                    .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                {
                                    match e {
                                        Ok(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::component::solana_rpcx_bindings::types::ParsedAccount {
                                                account_type: account_type15,
                                                data: data15,
                                                discriminator: discriminator15,
                                            } = e;
                                            let vec16 = (account_type15.into_bytes())
                                                .into_boxed_slice();
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            ::core::mem::forget(vec16);
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr16.cast_mut();
                                            let vec17 = (data15.into_bytes()).into_boxed_slice();
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            ::core::mem::forget(vec17);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len17;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr17.cast_mut();
                                            match discriminator15 {
                                                Some(e) => {
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec18 = (e).into_boxed_slice();
                                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                                    let len18 = vec18.len();
                                                    ::core::mem::forget(vec18);
                                                    *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len18;
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr18.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        Err(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            use super::super::super::super::component::solana_rpcx_bindings::types::ParseError as V23;
                                            match e {
                                                V23::UnknownAccountType(e) => {
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec19 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    ::core::mem::forget(vec19);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len19;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr19.cast_mut();
                                                }
                                                V23::DeserializationFailed(e) => {
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec20 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                                    let len20 = vec20.len();
                                                    ::core::mem::forget(vec20);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len20;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr20.cast_mut();
                                                }
                                                V23::InvalidData(e) => {
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let vec21 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                                    let len21 = vec21.len();
                                                    ::core::mem::forget(vec21);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len21;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr21.cast_mut();
                                                }
                                                V23::InsufficientData(e) => {
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    let vec22 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                                    let len22 = vec22.len();
                                                    ::core::mem::forget(vec22);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len22;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr22.cast_mut();
                                                }
                                            }
                                        }
                                    };
                                }
                            }
                            *ptr14
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len24;
                            *ptr14
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result24;
                        }
                        Err(e) => {
                            *ptr14.add(0).cast::<u8>() = (1i32) as u8;
                            let vec25 = (e.into_bytes()).into_boxed_slice();
                            let ptr25 = vec25.as_ptr().cast::<u8>();
                            let len25 = vec25.len();
                            ::core::mem::forget(vec25);
                            *ptr14
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len25;
                            *ptr14
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr25.cast_mut();
                        }
                    };
                    ptr14
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_parse_accounts<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base21 = l1;
                            let len21 = l2;
                            for i in 0..len21 {
                                let base = base21
                                    .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = i32::from(*base.add(0).cast::<u8>());
                                    match l3 {
                                        0 => {
                                            let l4 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l5 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l4, l5, 1);
                                            let l6 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                            let l8 = i32::from(
                                                *base
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l8 {
                                                0 => {}
                                                _ => {
                                                    let l9 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l10 = *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base11 = l9;
                                                    let len11 = l10;
                                                    _rt::cabi_dealloc(base11, len11 * 1, 1);
                                                }
                                            }
                                        }
                                        _ => {
                                            let l12 = i32::from(
                                                *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                            );
                                            match l12 {
                                                0 => {
                                                    let l13 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l13, l14, 1);
                                                }
                                                1 => {
                                                    let l15 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l16 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l15, l16, 1);
                                                }
                                                2 => {
                                                    let l17 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l18 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l17, l18, 1);
                                                }
                                                _ => {
                                                    let l19 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l20 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base21,
                                len21 * (8 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l22 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l23 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l22, l23, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_parse_with_options_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i64,
                    arg7: i32,
                    arg8: i64,
                    arg9: i32,
                    arg10: i32,
                    arg11: i32,
                    arg12: *mut u8,
                    arg13: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let result4 = T::parse_with_options(
                        super::super::super::super::component::solana_rpcx_bindings::types::SolanaAccount {
                            pubkey: _rt::string_lift(bytes0),
                            data: _rt::Vec::from_raw_parts(arg2.cast(), len1, len1),
                            owner: _rt::string_lift(bytes2),
                            lamports: arg6 as u64,
                            executable: _rt::bool_lift(arg7 as u8),
                            rent_epoch: arg8 as u64,
                        },
                        super::super::super::super::component::solana_rpcx_bindings::types::ParseOptions {
                            include_raw: _rt::bool_lift(arg9 as u8),
                            pretty_json: _rt::bool_lift(arg10 as u8),
                            custom: match arg11 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len3 = arg13;
                                        let bytes3 = _rt::Vec::from_raw_parts(
                                            arg12.cast(),
                                            len3,
                                            len3,
                                        );
                                        _rt::string_lift(bytes3)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    let ptr5 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result4 {
                        Ok(e) => {
                            *ptr5.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::component::solana_rpcx_bindings::types::ParsedAccount {
                                account_type: account_type6,
                                data: data6,
                                discriminator: discriminator6,
                            } = e;
                            let vec7 = (account_type6.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr5
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr5
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr7.cast_mut();
                            let vec8 = (data6.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *ptr5
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *ptr5
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr8.cast_mut();
                            match discriminator6 {
                                Some(e) => {
                                    *ptr5
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec9 = (e).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr5
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr5
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                None => {
                                    *ptr5
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr5.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::component::solana_rpcx_bindings::types::ParseError as V14;
                            match e {
                                V14::UnknownAccountType(e) => {
                                    *ptr5
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr5
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr5
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V14::DeserializationFailed(e) => {
                                    *ptr5
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr5
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr5
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V14::InvalidData(e) => {
                                    *ptr5
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr5
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr5
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V14::InsufficientData(e) => {
                                    *ptr5
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr5
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *ptr5
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                }
                            }
                        }
                    };
                    ptr5
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_parse_with_options<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                            let l5 = i32::from(
                                *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l5 {
                                0 => {}
                                _ => {
                                    let l6 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base8 = l6;
                                    let len8 = l7;
                                    _rt::cabi_dealloc(base8, len8 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l9 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l9 {
                                0 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                1 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                2 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                _ => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_parse_instruction_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let base5 = arg4;
                    let len5 = arg5;
                    let mut result5 = _rt::Vec::with_capacity(len5);
                    for i in 0..len5 {
                        let base = base5
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e5 = {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len4 = l3;
                            let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                            _rt::string_lift(bytes4)
                        };
                        result5.push(e5);
                    }
                    _rt::cabi_dealloc(
                        base5,
                        len5 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result6 = T::parse_instruction(super::super::super::super::component::solana_rpcx_bindings::types::InstructionData {
                        program_id: _rt::string_lift(bytes0),
                        data: _rt::Vec::from_raw_parts(arg2.cast(), len1, len1),
                        accounts: result5,
                    });
                    let ptr7 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result6 {
                        Ok(e) => {
                            *ptr7.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::component::solana_rpcx_bindings::types::ParsedInstruction {
                                instruction_name: instruction_name8,
                                data: data8,
                            } = e;
                            let vec9 = (instruction_name8.into_bytes())
                                .into_boxed_slice();
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            ::core::mem::forget(vec9);
                            *ptr7
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len9;
                            *ptr7
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr9.cast_mut();
                            let vec10 = (data8.into_bytes()).into_boxed_slice();
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            ::core::mem::forget(vec10);
                            *ptr7
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len10;
                            *ptr7
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr10.cast_mut();
                        }
                        Err(e) => {
                            *ptr7.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::component::solana_rpcx_bindings::types::ParseError as V15;
                            match e {
                                V15::UnknownAccountType(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V15::DeserializationFailed(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V15::InvalidData(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V15::InsufficientData(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                            }
                        }
                    };
                    ptr7
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_parse_instruction<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                        _ => {
                            let l5 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l5 {
                                0 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                1 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                2 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                _ => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_parse_instructions_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base12 = arg0;
                    let len12 = arg1;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12
                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                        let e12 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len5 = l4;
                            let l6 = *base
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l7 = *base
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base11 = l6;
                            let len11 = l7;
                            let mut result11 = _rt::Vec::with_capacity(len11);
                            for i in 0..len11 {
                                let base = base11
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                let e11 = {
                                    let l8 = *base.add(0).cast::<*mut u8>();
                                    let l9 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len10 = l9;
                                    let bytes10 = _rt::Vec::from_raw_parts(
                                        l8.cast(),
                                        len10,
                                        len10,
                                    );
                                    _rt::string_lift(bytes10)
                                };
                                result11.push(e11);
                            }
                            _rt::cabi_dealloc(
                                base11,
                                len11 * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            super::super::super::super::component::solana_rpcx_bindings::types::InstructionData {
                                program_id: _rt::string_lift(bytes2),
                                data: _rt::Vec::from_raw_parts(l3.cast(), len5, len5),
                                accounts: result11,
                            }
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(
                        base12,
                        len12 * (6 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result13 = T::parse_instructions(result12);
                    let ptr14 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result13 {
                        Ok(e) => {
                            *ptr14.add(0).cast::<u8>() = (0i32) as u8;
                            let vec23 = e;
                            let len23 = vec23.len();
                            let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec23.len() * (5 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result23 = if layout23.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout23);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec23.into_iter().enumerate() {
                                let base = result23
                                    .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                {
                                    match e {
                                        Ok(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::component::solana_rpcx_bindings::types::ParsedInstruction {
                                                instruction_name: instruction_name15,
                                                data: data15,
                                            } = e;
                                            let vec16 = (instruction_name15.into_bytes())
                                                .into_boxed_slice();
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            ::core::mem::forget(vec16);
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr16.cast_mut();
                                            let vec17 = (data15.into_bytes()).into_boxed_slice();
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            ::core::mem::forget(vec17);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len17;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr17.cast_mut();
                                        }
                                        Err(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            use super::super::super::super::component::solana_rpcx_bindings::types::ParseError as V22;
                                            match e {
                                                V22::UnknownAccountType(e) => {
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                                    let len18 = vec18.len();
                                                    ::core::mem::forget(vec18);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len18;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr18.cast_mut();
                                                }
                                                V22::DeserializationFailed(e) => {
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec19 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    ::core::mem::forget(vec19);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len19;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr19.cast_mut();
                                                }
                                                V22::InvalidData(e) => {
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let vec20 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                                    let len20 = vec20.len();
                                                    ::core::mem::forget(vec20);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len20;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr20.cast_mut();
                                                }
                                                V22::InsufficientData(e) => {
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    let vec21 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                                    let len21 = vec21.len();
                                                    ::core::mem::forget(vec21);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len21;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr21.cast_mut();
                                                }
                                            }
                                        }
                                    };
                                }
                            }
                            *ptr14
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len23;
                            *ptr14
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result23;
                        }
                        Err(e) => {
                            *ptr14.add(0).cast::<u8>() = (1i32) as u8;
                            let vec24 = (e.into_bytes()).into_boxed_slice();
                            let ptr24 = vec24.as_ptr().cast::<u8>();
                            let len24 = vec24.len();
                            ::core::mem::forget(vec24);
                            *ptr14
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len24;
                            *ptr14
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr24.cast_mut();
                        }
                    };
                    ptr14
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_parse_instructions<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base17 = l1;
                            let len17 = l2;
                            for i in 0..len17 {
                                let base = base17
                                    .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = i32::from(*base.add(0).cast::<u8>());
                                    match l3 {
                                        0 => {
                                            let l4 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l5 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l4, l5, 1);
                                            let l6 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                        }
                                        _ => {
                                            let l8 = i32::from(
                                                *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                            );
                                            match l8 {
                                                0 => {
                                                    let l9 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l10 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l9, l10, 1);
                                                }
                                                1 => {
                                                    let l11 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l12 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l11, l12, 1);
                                                }
                                                2 => {
                                                    let l13 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l13, l14, 1);
                                                }
                                                _ => {
                                                    let l15 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l16 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l15, l16, 1);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base17,
                                len17 * (5 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l18 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l19 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l18, l19, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_can_parse_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let result2 = T::can_parse(
                        _rt::string_lift(bytes0),
                        _rt::Vec::from_raw_parts(arg2.cast(), len1, len1),
                    );
                    match result2 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_supported_types_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_supported_types();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_supported_types<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base4 = l0;
                    let len4 = l1;
                    for i in 0..len4 {
                        let base = base4
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base4,
                        len4 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_program_metadata_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_program_metadata();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::component::solana_rpcx_bindings::types::ProgramMetadata {
                                name: name2,
                                program_id: program_id2,
                                project_url: project_url2,
                                version: version2,
                            } = e;
                            match name2 {
                                Some(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match program_id2 {
                                Some(e) => {
                                    *ptr1
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr1
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr1
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match project_url2 {
                                Some(e) => {
                                    *ptr1
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match version2 {
                                Some(e) => {
                                    *ptr1
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr1
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr1
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_program_metadata<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                            let l4 = i32::from(
                                *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l4 {
                                0 => {}
                                _ => {
                                    let l5 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                            }
                            let l7 = i32::from(
                                *arg0
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l7 {
                                0 => {}
                                _ => {
                                    let l8 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                            }
                            let l10 = i32::from(
                                *arg0
                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l10 {
                                0 => {}
                                _ => {
                                    let l11 = *arg0
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l12 = *arg0
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// Parse a single account
                    fn parse_account(
                        account: SolanaAccount,
                    ) -> Result<ParsedAccount, ParseError>;
                    /// Parse multiple accounts in batch
                    fn parse_accounts(
                        accounts: _rt::Vec<SolanaAccount>,
                    ) -> Result<
                        _rt::Vec<Result<ParsedAccount, ParseError>>,
                        _rt::String,
                    >;
                    /// Parse with custom options
                    fn parse_with_options(
                        account: SolanaAccount,
                        options: ParseOptions,
                    ) -> Result<ParsedAccount, ParseError>;
                    /// Parse an instruction
                    fn parse_instruction(
                        instruction: InstructionData,
                    ) -> Result<ParsedInstruction, ParseError>;
                    /// Parse multiple instructions
                    fn parse_instructions(
                        instructions: _rt::Vec<InstructionData>,
                    ) -> Result<
                        _rt::Vec<Result<ParsedInstruction, ParseError>>,
                        _rt::String,
                    >;
                    /// Check if parser can handle this account
                    fn can_parse(owner: _rt::String, data_preview: _rt::Vec<u8>) -> bool;
                    /// Get list of account types this parser supports
                    fn get_supported_types() -> _rt::Vec<_rt::String>;
                    /// Get program metadata
                    fn get_program_metadata() -> Option<ProgramMetadata>;
                }
                #[macro_export]
                #[doc(hidden)]
                macro_rules! __export_component_solana_rpcx_bindings_program_parser_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "component:solana-rpcx-bindings/program-parser#parse-account")]
                        unsafe extern "C" fn export_parse_account(arg0 : * mut u8, arg1 :
                        usize, arg2 : * mut u8, arg3 : usize, arg4 : * mut u8, arg5 :
                        usize, arg6 : i64, arg7 : i32, arg8 : i64,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_parse_account_cabi::<$ty > (arg0,
                        arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) } } #[unsafe
                        (export_name =
                        "cabi_post_component:solana-rpcx-bindings/program-parser#parse-account")]
                        unsafe extern "C" fn _post_return_parse_account(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*:: __post_return_parse_account::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "component:solana-rpcx-bindings/program-parser#parse-accounts")]
                        unsafe extern "C" fn export_parse_accounts(arg0 : * mut u8, arg1
                        : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_parse_accounts_cabi::<$ty > (arg0, arg1) } } #[unsafe
                        (export_name =
                        "cabi_post_component:solana-rpcx-bindings/program-parser#parse-accounts")]
                        unsafe extern "C" fn _post_return_parse_accounts(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_parse_accounts::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "component:solana-rpcx-bindings/program-parser#parse-with-options")]
                        unsafe extern "C" fn export_parse_with_options(arg0 : * mut u8,
                        arg1 : usize, arg2 : * mut u8, arg3 : usize, arg4 : * mut u8,
                        arg5 : usize, arg6 : i64, arg7 : i32, arg8 : i64, arg9 : i32,
                        arg10 : i32, arg11 : i32, arg12 : * mut u8, arg13 : usize,) -> *
                        mut u8 { unsafe { $($path_to_types)*::
                        _export_parse_with_options_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) }
                        } #[unsafe (export_name =
                        "cabi_post_component:solana-rpcx-bindings/program-parser#parse-with-options")]
                        unsafe extern "C" fn _post_return_parse_with_options(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_parse_with_options::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "component:solana-rpcx-bindings/program-parser#parse-instruction")]
                        unsafe extern "C" fn export_parse_instruction(arg0 : * mut u8,
                        arg1 : usize, arg2 : * mut u8, arg3 : usize, arg4 : * mut u8,
                        arg5 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_parse_instruction_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5) } } #[unsafe (export_name =
                        "cabi_post_component:solana-rpcx-bindings/program-parser#parse-instruction")]
                        unsafe extern "C" fn _post_return_parse_instruction(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_parse_instruction::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "component:solana-rpcx-bindings/program-parser#parse-instructions")]
                        unsafe extern "C" fn export_parse_instructions(arg0 : * mut u8,
                        arg1 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_parse_instructions_cabi::<$ty > (arg0, arg1) } } #[unsafe
                        (export_name =
                        "cabi_post_component:solana-rpcx-bindings/program-parser#parse-instructions")]
                        unsafe extern "C" fn _post_return_parse_instructions(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_parse_instructions::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "component:solana-rpcx-bindings/program-parser#can-parse")]
                        unsafe extern "C" fn export_can_parse(arg0 : * mut u8, arg1 :
                        usize, arg2 : * mut u8, arg3 : usize,) -> i32 { unsafe {
                        $($path_to_types)*:: _export_can_parse_cabi::<$ty > (arg0, arg1,
                        arg2, arg3) } } #[unsafe (export_name =
                        "component:solana-rpcx-bindings/program-parser#get-supported-types")]
                        unsafe extern "C" fn export_get_supported_types() -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_get_supported_types_cabi::<$ty > () } } #[unsafe
                        (export_name =
                        "cabi_post_component:solana-rpcx-bindings/program-parser#get-supported-types")]
                        unsafe extern "C" fn _post_return_get_supported_types(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_get_supported_types::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "component:solana-rpcx-bindings/program-parser#get-program-metadata")]
                        unsafe extern "C" fn export_get_program_metadata() -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_get_program_metadata_cabi::<$ty > () } } #[unsafe
                        (export_name =
                        "cabi_post_component:solana-rpcx-bindings/program-parser#get-program-metadata")]
                        unsafe extern "C" fn _post_return_get_program_metadata(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_get_program_metadata::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub use __export_component_solana_rpcx_bindings_program_parser_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 13 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 13
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// ============================================================================
            /// ACCOUNTS-TRANSFORMER - Export (Guest implements this)
            /// ============================================================================
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod accounts_transformer {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type SolanaAccount = super::super::super::super::component::solana_rpcx_bindings::types::SolanaAccount;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_transform_accounts_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base12 = arg0;
                    let len12 = arg1;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12
                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                        let e12 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len5 = l4;
                            let l6 = *base
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l7 = *base
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len8 = l7;
                            let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                            let l9 = *base
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>();
                            let l10 = i32::from(
                                *base
                                    .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let l11 = *base
                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>();
                            super::super::super::super::component::solana_rpcx_bindings::types::SolanaAccount {
                                pubkey: _rt::string_lift(bytes2),
                                data: _rt::Vec::from_raw_parts(l3.cast(), len5, len5),
                                owner: _rt::string_lift(bytes8),
                                lamports: l9 as u64,
                                executable: _rt::bool_lift(l10 as u8),
                                rent_epoch: l11 as u64,
                            }
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(
                        base12,
                        len12 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let len13 = arg3;
                    let bytes13 = _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                    let result14 = T::transform_accounts(
                        result12,
                        _rt::string_lift(bytes13),
                    );
                    let ptr15 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result14 {
                        Ok(e) => {
                            *ptr15.add(0).cast::<u8>() = (0i32) as u8;
                            let vec16 = (e.into_bytes()).into_boxed_slice();
                            let ptr16 = vec16.as_ptr().cast::<u8>();
                            let len16 = vec16.len();
                            ::core::mem::forget(vec16);
                            *ptr15
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len16;
                            *ptr15
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr16.cast_mut();
                        }
                        Err(e) => {
                            *ptr15.add(0).cast::<u8>() = (1i32) as u8;
                            let vec17 = (e.into_bytes()).into_boxed_slice();
                            let ptr17 = vec17.as_ptr().cast::<u8>();
                            let len17 = vec17.len();
                            ::core::mem::forget(vec17);
                            *ptr15
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len17;
                            *ptr15
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr17.cast_mut();
                        }
                    };
                    ptr15
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_transform_accounts<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// Transform/aggregate many accounts into a single result
                    /// Used for analytics, rankings, summaries, etc.
                    ///
                    /// Example: Take 1000 pool accounts, return top 10 by TVL
                    fn transform_accounts(
                        accounts: _rt::Vec<SolanaAccount>,
                        params: _rt::String,
                    ) -> Result<_rt::String, _rt::String>;
                }
                #[macro_export]
                #[doc(hidden)]
                macro_rules! __export_component_solana_rpcx_bindings_accounts_transformer_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "component:solana-rpcx-bindings/accounts-transformer#transform-accounts")]
                        unsafe extern "C" fn export_transform_accounts(arg0 : * mut u8,
                        arg1 : usize, arg2 : * mut u8, arg3 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_transform_accounts_cabi::<$ty > (arg0, arg1, arg2, arg3)
                        } } #[unsafe (export_name =
                        "cabi_post_component:solana-rpcx-bindings/accounts-transformer#transform-accounts")]
                        unsafe extern "C" fn _post_return_transform_accounts(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_transform_accounts::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub use __export_component_solana_rpcx_bindings_accounts_transformer_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 3 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 3
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// ============================================================================
            /// ACCOUNTS-TRANSFORMER-SETUP - Export (Guest implements this)
            /// ============================================================================
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod accounts_transformer_setup {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// PDA seed component
                #[derive(Clone)]
                pub struct SeedComponent {
                    /// Static bytes (e.g., b"pool")
                    pub constant: _rt::Vec<u8>,
                    /// Optional account key to use as seed
                    pub account_key: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for SeedComponent {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("SeedComponent")
                            .field("constant", &self.constant)
                            .field("account-key", &self.account_key)
                            .finish()
                    }
                }
                /// Request specifying which accounts to fetch for transformation
                #[derive(Clone)]
                pub struct TransformerRequest {
                    /// List of PDA seed patterns
                    /// Each inner list represents one PDA derivation pattern
                    pub seeds: _rt::Vec<_rt::Vec<SeedComponent>>,
                    /// Optional: specific account addresses to fetch
                    pub addresses: Option<_rt::Vec<_rt::String>>,
                    /// Optional: filter by owner program
                    pub owner_filter: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for TransformerRequest {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("TransformerRequest")
                            .field("seeds", &self.seeds)
                            .field("addresses", &self.addresses)
                            .field("owner-filter", &self.owner_filter)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_setup_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::setup();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let TransformerRequest {
                        seeds: seeds2,
                        addresses: addresses2,
                        owner_filter: owner_filter2,
                    } = result0;
                    let vec7 = seeds2;
                    let len7 = vec7.len();
                    let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec7.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result7 = if layout7.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout7);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec7.into_iter().enumerate() {
                        let base = result7
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec6 = e;
                            let len6 = vec6.len();
                            let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec6.len() * (5 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result6 = if layout6.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout6);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec6.into_iter().enumerate() {
                                let base = result6
                                    .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let SeedComponent {
                                        constant: constant3,
                                        account_key: account_key3,
                                    } = e;
                                    let vec4 = (constant3).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                    match account_key3 {
                                        Some(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec5 = (e.into_bytes()).into_boxed_slice();
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();
                                            ::core::mem::forget(vec5);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len5;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr5.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *base.add(0).cast::<*mut u8>() = result6;
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len7;
                    *ptr1.add(0).cast::<*mut u8>() = result7;
                    match addresses2 {
                        Some(e) => {
                            *ptr1
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec9 = e;
                            let len9 = vec9.len();
                            let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec9.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result9 = if layout9.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout9);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec9.into_iter().enumerate() {
                                let base = result9
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                            }
                            *ptr1
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len9;
                            *ptr1
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result9;
                        }
                        None => {
                            *ptr1
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match owner_filter2 {
                        Some(e) => {
                            *ptr1
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec10 = (e.into_bytes()).into_boxed_slice();
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            ::core::mem::forget(vec10);
                            *ptr1
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len10;
                            *ptr1
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr10.cast_mut();
                        }
                        None => {
                            *ptr1
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_setup<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base11 = l0;
                    let len11 = l1;
                    for i in 0..len11 {
                        let base = base11
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base10 = l2;
                            let len10 = l3;
                            for i in 0..len10 {
                                let base = base10
                                    .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l4 = *base.add(0).cast::<*mut u8>();
                                    let l5 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base6 = l4;
                                    let len6 = l5;
                                    _rt::cabi_dealloc(base6, len6 * 1, 1);
                                    let l7 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l7 {
                                        0 => {}
                                        _ => {
                                            let l8 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l9 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l8, l9, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base10,
                                len10 * (5 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                    }
                    _rt::cabi_dealloc(
                        base11,
                        len11 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l12 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    match l12 {
                        0 => {}
                        _ => {
                            let l13 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l14 = *arg0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base17 = l13;
                            let len17 = l14;
                            for i in 0..len17 {
                                let base = base17
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l15 = *base.add(0).cast::<*mut u8>();
                                    let l16 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l15, l16, 1);
                                }
                            }
                            _rt::cabi_dealloc(
                                base17,
                                len17 * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                    }
                    let l18 = i32::from(
                        *arg0.add(5 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    match l18 {
                        0 => {}
                        _ => {
                            let l19 = *arg0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l20 = *arg0
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l19, l20, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// Tell the RPC which accounts this transformer needs
                    /// The RPC will fetch these accounts and pass them to transform-accounts
                    fn setup() -> TransformerRequest;
                }
                #[macro_export]
                #[doc(hidden)]
                macro_rules! __export_component_solana_rpcx_bindings_accounts_transformer_setup_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "component:solana-rpcx-bindings/accounts-transformer-setup#setup")]
                        unsafe extern "C" fn export_setup() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_setup_cabi::<$ty > () } } #[unsafe
                        (export_name =
                        "cabi_post_component:solana-rpcx-bindings/accounts-transformer-setup#setup")]
                        unsafe extern "C" fn _post_return_setup(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_setup::<$ty > (arg0)
                        } } };
                    };
                }
                #[doc(hidden)]
                pub use __export_component_solana_rpcx_bindings_accounts_transformer_setup_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 8 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 8
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// ============================================================================
            /// TRANSACTION-TRANSFORMER - Export (Guest implements this)
            /// ============================================================================
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod transaction_transformer {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type SolanaTransaction = super::super::super::super::component::solana_rpcx_bindings::types::SolanaTransaction;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_transform_transaction_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: *mut u8,
                    arg9: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base13 = arg2;
                    let len13 = arg3;
                    let mut result13 = _rt::Vec::with_capacity(len13);
                    for i in 0..len13 {
                        let base = base13
                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                        let e13 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                            let l4 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l5 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len6 = l5;
                            let l7 = *base
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l8 = *base
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base12 = l7;
                            let len12 = l8;
                            let mut result12 = _rt::Vec::with_capacity(len12);
                            for i in 0..len12 {
                                let base = base12
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                let e12 = {
                                    let l9 = *base.add(0).cast::<*mut u8>();
                                    let l10 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len11 = l10;
                                    let bytes11 = _rt::Vec::from_raw_parts(
                                        l9.cast(),
                                        len11,
                                        len11,
                                    );
                                    _rt::string_lift(bytes11)
                                };
                                result12.push(e12);
                            }
                            _rt::cabi_dealloc(
                                base12,
                                len12 * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            super::super::super::super::component::solana_rpcx_bindings::types::InstructionData {
                                program_id: _rt::string_lift(bytes3),
                                data: _rt::Vec::from_raw_parts(l4.cast(), len6, len6),
                                accounts: result12,
                            }
                        };
                        result13.push(e13);
                    }
                    _rt::cabi_dealloc(
                        base13,
                        len13 * (6 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let base17 = arg4;
                    let len17 = arg5;
                    let mut result17 = _rt::Vec::with_capacity(len17);
                    for i in 0..len17 {
                        let base = base17
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e17 = {
                            let l14 = *base.add(0).cast::<*mut u8>();
                            let l15 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len16 = l15;
                            let bytes16 = _rt::Vec::from_raw_parts(
                                l14.cast(),
                                len16,
                                len16,
                            );
                            _rt::string_lift(bytes16)
                        };
                        result17.push(e17);
                    }
                    _rt::cabi_dealloc(
                        base17,
                        len17 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let len18 = arg7;
                    let bytes18 = _rt::Vec::from_raw_parts(arg6.cast(), len18, len18);
                    let len19 = arg9;
                    let bytes19 = _rt::Vec::from_raw_parts(arg8.cast(), len19, len19);
                    let result20 = T::transform_transaction(
                        super::super::super::super::component::solana_rpcx_bindings::types::SolanaTransaction {
                            signature: _rt::string_lift(bytes0),
                            instructions: result13,
                            accounts: result17,
                            recent_blockhash: _rt::string_lift(bytes18),
                        },
                        _rt::string_lift(bytes19),
                    );
                    let ptr21 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result20 {
                        Ok(e) => {
                            *ptr21.add(0).cast::<u8>() = (0i32) as u8;
                            let vec22 = (e.into_bytes()).into_boxed_slice();
                            let ptr22 = vec22.as_ptr().cast::<u8>();
                            let len22 = vec22.len();
                            ::core::mem::forget(vec22);
                            *ptr21
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len22;
                            *ptr21
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr22.cast_mut();
                        }
                        Err(e) => {
                            *ptr21.add(0).cast::<u8>() = (1i32) as u8;
                            let vec23 = (e.into_bytes()).into_boxed_slice();
                            let ptr23 = vec23.as_ptr().cast::<u8>();
                            let len23 = vec23.len();
                            ::core::mem::forget(vec23);
                            *ptr21
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len23;
                            *ptr21
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr23.cast_mut();
                        }
                    };
                    ptr21
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_transform_transaction<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// Enrich/transform transaction data to make it human-readable
                    ///
                    /// Example: Raw swap instruction → "Swapped 100 USDC for 0.05 SOL"
                    fn transform_transaction(
                        transaction: SolanaTransaction,
                        params: _rt::String,
                    ) -> Result<_rt::String, _rt::String>;
                }
                #[macro_export]
                #[doc(hidden)]
                macro_rules! __export_component_solana_rpcx_bindings_transaction_transformer_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "component:solana-rpcx-bindings/transaction-transformer#transform-transaction")]
                        unsafe extern "C" fn export_transform_transaction(arg0 : * mut
                        u8, arg1 : usize, arg2 : * mut u8, arg3 : usize, arg4 : * mut u8,
                        arg5 : usize, arg6 : * mut u8, arg7 : usize, arg8 : * mut u8,
                        arg9 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_transform_transaction_cabi::<$ty > (arg0, arg1, arg2,
                        arg3, arg4, arg5, arg6, arg7, arg8, arg9) } } #[unsafe
                        (export_name =
                        "cabi_post_component:solana-rpcx-bindings/transaction-transformer#transform-transaction")]
                        unsafe extern "C" fn _post_return_transform_transaction(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_transform_transaction::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub use __export_component_solana_rpcx_bindings_transaction_transformer_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 3 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 3
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// ============================================================================
            /// VIEW-FUNCTION - Export (Guest implements this)
            /// ============================================================================
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod view_function {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_view_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = T::view(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec5 = (e.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_view<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// Create custom RPC methods (like Ethereum view functions)
                    ///
                    /// Examples:
                    ///   method="getSwapQuote", params='{"pool":"PoolA","amount_in":100}'
                    ///   method="getUserPortfolio", params='{"user":"UserA"}'
                    ///   method="getPoolAPR", params='{"pool":"PoolA"}'
                    fn view(
                        method: _rt::String,
                        params: _rt::String,
                    ) -> Result<_rt::String, _rt::String>;
                }
                #[macro_export]
                #[doc(hidden)]
                macro_rules! __export_component_solana_rpcx_bindings_view_function_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "component:solana-rpcx-bindings/view-function#view")] unsafe
                        extern "C" fn export_view(arg0 : * mut u8, arg1 : usize, arg2 : *
                        mut u8, arg3 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_view_cabi::<$ty > (arg0, arg1, arg2,
                        arg3) } } #[unsafe (export_name =
                        "cabi_post_component:solana-rpcx-bindings/view-function#view")]
                        unsafe extern "C" fn _post_return_view(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*:: __post_return_view::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub use __export_component_solana_rpcx_bindings_view_function_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 3 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 3
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[macro_export]
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_full_parser_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::component::solana_rpcx_bindings::program_parser::__export_component_solana_rpcx_bindings_program_parser_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::component::solana_rpcx_bindings::program_parser);
        $($path_to_types_root)*::
        exports::component::solana_rpcx_bindings::accounts_transformer::__export_component_solana_rpcx_bindings_accounts_transformer_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::component::solana_rpcx_bindings::accounts_transformer);
        $($path_to_types_root)*::
        exports::component::solana_rpcx_bindings::accounts_transformer_setup::__export_component_solana_rpcx_bindings_accounts_transformer_setup_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::component::solana_rpcx_bindings::accounts_transformer_setup);
        $($path_to_types_root)*::
        exports::component::solana_rpcx_bindings::transaction_transformer::__export_component_solana_rpcx_bindings_transaction_transformer_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::component::solana_rpcx_bindings::transaction_transformer);
        $($path_to_types_root)*::
        exports::component::solana_rpcx_bindings::view_function::__export_component_solana_rpcx_bindings_view_function_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::component::solana_rpcx_bindings::view_function);
    };
}
#[doc(inline)]
pub use __export_full_parser_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:component:solana-rpcx-bindings:full-parser:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2253] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xcb\x10\x01A\x02\x01\
A\x16\x01B\x15\x01p}\x01r\x06\x06pubkeys\x04data\0\x05owners\x08lamportsw\x0aexe\
cutable\x7f\x0arent-epochw\x04\0\x0esolana-account\x03\0\x01\x01k\0\x01r\x03\x0c\
account-types\x04datas\x0ddiscriminator\x03\x04\0\x0eparsed-account\x03\0\x04\x01\
q\x04\x14unknown-account-type\x01s\0\x16deserialization-failed\x01s\0\x0cinvalid\
-data\x01s\0\x11insufficient-data\x01s\0\x04\0\x0bparse-error\x03\0\x06\x01ks\x01\
r\x03\x0binclude-raw\x7f\x0bpretty-json\x7f\x06custom\x08\x04\0\x0dparse-options\
\x03\0\x09\x01ps\x01r\x03\x0aprogram-ids\x04data\0\x08accounts\x0b\x04\0\x10inst\
ruction-data\x03\0\x0c\x01p\x0d\x01r\x04\x09signatures\x0cinstructions\x0e\x08ac\
counts\x0b\x10recent-blockhashs\x04\0\x12solana-transaction\x03\0\x0f\x01r\x02\x10\
instruction-names\x04datas\x04\0\x12parsed-instruction\x03\0\x11\x01r\x04\x04nam\
e\x08\x0aprogram-id\x08\x0bproject-url\x08\x07version\x08\x04\0\x10program-metad\
ata\x03\0\x13\x03\0$component:solana-rpcx-bindings/types\x05\0\x02\x03\0\0\x0eso\
lana-account\x01B\x09\x02\x03\x02\x01\x01\x04\0\x0esolana-account\x03\0\0\x01k\x01\
\x01@\x01\x06pubkeys\0\x02\x04\0\x0bget-account\x01\x03\x01ps\x01p\x02\x01@\x01\x07\
pubkeys\x04\0\x05\x04\0\x15get-multiple-accounts\x01\x06\x03\0*component:solana-\
rpcx-bindings/accounts-db\x05\x02\x02\x03\0\0\x0eparsed-account\x02\x03\0\0\x0bp\
arse-error\x02\x03\0\0\x0dparse-options\x02\x03\0\0\x10instruction-data\x02\x03\0\
\0\x12parsed-instruction\x02\x03\0\0\x10program-metadata\x01B)\x02\x03\x02\x01\x01\
\x04\0\x0esolana-account\x03\0\0\x02\x03\x02\x01\x03\x04\0\x0eparsed-account\x03\
\0\x02\x02\x03\x02\x01\x04\x04\0\x0bparse-error\x03\0\x04\x02\x03\x02\x01\x05\x04\
\0\x0dparse-options\x03\0\x06\x02\x03\x02\x01\x06\x04\0\x10instruction-data\x03\0\
\x08\x02\x03\x02\x01\x07\x04\0\x12parsed-instruction\x03\0\x0a\x02\x03\x02\x01\x08\
\x04\0\x10program-metadata\x03\0\x0c\x01j\x01\x03\x01\x05\x01@\x01\x07account\x01\
\0\x0e\x04\0\x0dparse-account\x01\x0f\x01p\x01\x01p\x0e\x01j\x01\x11\x01s\x01@\x01\
\x08accounts\x10\0\x12\x04\0\x0eparse-accounts\x01\x13\x01@\x02\x07account\x01\x07\
options\x07\0\x0e\x04\0\x12parse-with-options\x01\x14\x01j\x01\x0b\x01\x05\x01@\x01\
\x0binstruction\x09\0\x15\x04\0\x11parse-instruction\x01\x16\x01p\x09\x01p\x15\x01\
j\x01\x18\x01s\x01@\x01\x0cinstructions\x17\0\x19\x04\0\x12parse-instructions\x01\
\x1a\x01p}\x01@\x02\x05owners\x0cdata-preview\x1b\0\x7f\x04\0\x09can-parse\x01\x1c\
\x01ps\x01@\0\0\x1d\x04\0\x13get-supported-types\x01\x1e\x01k\x0d\x01@\0\0\x1f\x04\
\0\x14get-program-metadata\x01\x20\x04\0-component:solana-rpcx-bindings/program-\
parser\x05\x09\x01B\x06\x02\x03\x02\x01\x01\x04\0\x0esolana-account\x03\0\0\x01p\
\x01\x01j\x01s\x01s\x01@\x02\x08accounts\x02\x06paramss\0\x03\x04\0\x12transform\
-accounts\x01\x04\x04\03component:solana-rpcx-bindings/accounts-transformer\x05\x0a\
\x01B\x0c\x01p}\x01ks\x01r\x02\x08constant\0\x0baccount-key\x01\x04\0\x0eseed-co\
mponent\x03\0\x02\x01p\x03\x01p\x04\x01ps\x01k\x06\x01r\x03\x05seeds\x05\x09addr\
esses\x07\x0cowner-filter\x01\x04\0\x13transformer-request\x03\0\x08\x01@\0\0\x09\
\x04\0\x05setup\x01\x0a\x04\09component:solana-rpcx-bindings/accounts-transforme\
r-setup\x05\x0b\x02\x03\0\0\x12solana-transaction\x01B\x05\x02\x03\x02\x01\x0c\x04\
\0\x12solana-transaction\x03\0\0\x01j\x01s\x01s\x01@\x02\x0btransaction\x01\x06p\
aramss\0\x02\x04\0\x15transform-transaction\x01\x03\x04\06component:solana-rpcx-\
bindings/transaction-transformer\x05\x0d\x01B\x03\x01j\x01s\x01s\x01@\x02\x06met\
hods\x06paramss\0\0\x04\0\x04view\x01\x01\x04\0,component:solana-rpcx-bindings/v\
iew-function\x05\x0e\x04\0*component:solana-rpcx-bindings/full-parser\x04\0\x0b\x11\
\x01\0\x0bfull-parser\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-com\
ponent\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
